using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace RPG.src
{
    class Chunk
    {
        private Point region;

        public List<string> chunkTilesets;
        public List<Layer> layers;

        //Aux
        private int aux;
        private List<int> auxList;
        private Tileset tileset;
        private int numX;
        private int numY;
        private string regionString;

        public Chunk(int x, int y)
        {   
            chunkTilesets = new List<string>();
            layers = new List<Layer>();
            auxList = new List<int>();

            region.X = x;
            region.Y = y;

            regionString = "" + x + "." + y;
            switch (regionString)
            {
                default:
                    {
                        chunkTilesets.Add("grama B");
                        chunkTilesets.Add("terra B");

                        //layers.Add(layer = new Layer("") { data = new ushort[]
                        #region
                        layers.Add(new Layer(0) { data = new ushort[] { 23, 24, 1, 2, 3, 1, 4, 4, 2, 2, 2, 4, 1, 3, 2, 4, 3, 4, 3, 1, 4, 2, 3, 1, 1, 1, 1, 3, 2, 4, 1, 3, 4, 3, 4, 2, 1, 4, 4, 2, 2, 2, 2, 4, 4, 1, 2, 4, 3, 4, 3, 1, 2, 3, 1, 1, 1, 1, 1, 1, 3, 2, 21, 22, 27, 28, 3, 4, 4, 4, 4, 3, 4, 1, 1, 1, 4, 3, 2, 2, 2, 3, 1, 3, 2, 2, 3, 1, 2, 4, 4, 2, 3, 4, 1, 3, 3, 1, 2, 1, 1, 1, 1, 2, 1, 3, 3, 3, 1, 2, 4, 1, 4, 2, 3, 2, 4, 4, 2, 3, 4, 1, 1, 4, 2, 1, 25, 26, 4, 4, 3, 3, 1, 3, 1, 3, 3, 4, 4, 2, 2, 3, 2, 2, 4, 4, 3, 2, 1, 3, 1, 2, 2, 4, 1, 2, 4, 2, 4, 2, 1, 1, 2, 2, 3, 2, 3, 2, 2, 1, 1, 2, 4, 2, 4, 4, 1, 1, 2, 4, 3, 2, 3, 4, 2, 1, 1, 4, 1, 2, 1, 4, 1, 2, 1, 1, 3, 4, 4, 1, 2, 3, 2, 4, 2, 4, 1, 4, 4, 1, 4, 4, 1, 2, 2, 2, 1, 1, 1, 2, 3, 3, 4, 2, 2, 4, 2, 3, 2, 3, 1, 3, 4, 2, 4, 3, 1, 1, 2, 1, 1, 2, 1, 1, 3, 4, 4, 1, 2, 3, 2, 4, 2, 4, 1, 4, 4, 1, 3, 4, 3, 4, 3, 1, 4, 2, 3, 3, 3, 3, 3, 2, 4, 1, 3, 4, 3, 4, 3, 1, 4, 2, 3, 3, 3, 3, 3, 2, 4, 1, 3, 4, 3, 4, 3, 1, 4, 2, 3, 3, 3, 3, 3, 2, 4, 1, 2, 4, 3, 4, 2, 1, 4, 2, 2, 3, 3, 3, 2, 2, 2, 1, 3, 3, 1, 4, 3, 2, 2, 2, 3, 4, 1, 3, 3, 1, 2, 1, 1, 3, 1, 4, 1, 2, 2, 2, 1, 2, 1, 1, 1, 4, 2, 4, 1, 1, 1, 2, 1, 3, 2, 3, 1, 2, 1, 1, 1, 4, 2, 4, 1, 1, 4, 2, 1, 3, 3, 3, 1, 2, 4, 1, 1, 4, 3, 3, 4, 1, 4, 1, 1, 3, 3, 4, 1, 4, 4, 4, 1, 1, 2, 2, 1, 3, 1, 3, 1, 2, 2, 1, 3, 4, 1, 4, 3, 1, 2, 2, 3, 2, 1, 2, 3, 4, 4, 3, 3, 1, 3, 1, 3, 3, 4, 4, 2, 2, 3, 2, 2, 4, 4, 2, 2, 3, 2, 3, 2, 2, 2, 2, 1, 4, 4, 3, 4, 4, 3, 4, 4, 1, 2, 2, 2, 1, 1, 1, 2, 3, 3, 2, 3, 3, 2, 3, 3, 2, 1, 4, 1, 2, 3, 2, 1, 4, 4, 1, 4, 4, 1, 4, 4, 1, 2, 3, 2, 1, 4, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 3, 1, 4, 1, 2, 3, 3, 3, 3, 3, 2, 2, 4, 3, 2, 1, 2, 1, 4, 3, 1, 1, 4, 4, 4, 4, 1, 3, 2, 4, 1, 2, 1, 4, 3, 1, 4, 2, 2, 3, 3, 2, 2, 4, 1, 3, 4, 3, 4, 3, 4, 2, 3, 1, 1, 1, 1, 1, 3, 3, 2, 1, 3, 4, 3, 4, 2, 1, 4, 1, 2, 1, 3, 3, 3, 4, 3, 4, 4, 4, 2, 1, 3, 2, 2, 3, 4, 3, 2, 2, 2, 1, 2, 1, 1, 1, 4, 3, 2, 4, 4, 2, 3, 2, 4, 4, 4, 3, 4, 3, 3, 3, 1, 2, 4, 1, 1, 4, 2, 4, 1, 1, 1, 2, 1, 2, 2, 2, 3, 4, 1, 3, 3, 2, 1, 1, 2, 2, 3, 2, 3, 4, 2, 1, 1, 4, 4, 2, 1, 4, 3, 3, 4, 4, 2, 4, 2, 1, 4, 3, 3, 1, 1, 4, 3, 1, 2, 2, 1, 1, 4, 1, 4, 1, 1, 2, 2, 3, 3, 1, 2, 3, 4, 4, 3, 3, 1, 3, 1, 3, 3, 4, 4, 2, 2, 3, 2, 2, 2, 1, 2, 2, 4, 3, 1, 3, 4, 2, 4, 1, 4, 4, 3, 1, 4, 3, 4, 4, 1, 2, 3, 2, 1, 4, 1, 3, 1, 3, 2, 3, 3, 2, 1, 1, 3, 4, 4, 4, 3, 1, 3, 4, 3, 2, 4, 2, 2, 4, 3, 3, 2, 1, 1, 1, 2, 2, 2, 1, 4, 4, 1, 2, 4, 3, 2, 1, 2, 3, 1, 2, 2, 3, 3, 3, 3, 3, 2, 4, 1, 3, 4, 3, 4, 3, 1, 4, 2, 2, 3, 3, 3, 2, 2, 4, 1, 2, 1, 3, 1, 2, 3, 1, 4, 2, 2, 2, 2, 2, 4, 1, 3, 2, 1, 2, 1, 4, 3, 1, 4, 4, 2, 2, 4, 4, 1, 3, 2, 4, 4, 2, 3, 2, 1, 1, 4, 2, 1, 3, 2, 2, 3, 4, 1, 3, 3, 1, 4, 3, 2, 2, 2, 1, 2, 1, 1, 1, 4, 3, 4, 4, 4, 4, 3, 4, 1, 1, 1, 4, 3, 2, 2, 2, 3, 4, 3, 2, 2, 3, 1, 3, 2, 4, 2, 3, 4, 1, 3, 1, 4, 1, 1, 4, 1, 4, 3, 1, 2, 2, 3, 2, 3, 2, 3, 4, 4, 3, 3, 1, 3, 1, 2, 3, 4, 1, 2, 4, 2, 4, 2, 1, 1, 2, 4, 3, 2, 2, 4, 4, 3, 3, 4, 1, 4, 1, 1, 3, 3, 4, 1, 4, 1, 4, 1, 1, 2, 2, 1, 3, 1, 3, 3, 2, 2, 2, 2, 4, 3, 3, 3, 4, 2, 4, 1, 4, 4, 3, 4, 4, 1, 4, 4, 4, 2, 3, 2, 4, 4, 4, 3, 1, 1, 3, 1, 1, 3, 4, 4, 1, 2, 3, 2, 1, 4, 4, 3, 1, 1, 2, 1, 1, 3, 1, 4, 1, 2, 2, 2, 1, 4, 1, 3, 1, 3, 2, 3, 1, 2, 2, 1, 2, 3, 1, 4, 2, 2, 3, 2, 2, 2, 4, 1, 2, 4, 3, 4, 3, 1, 4, 2, 3, 1, 1, 1, 3, 3, 2, 4, 1, 2, 1, 2, 1, 4, 3, 1, 1, 4, 4, 4, 4, 1, 3, 2, 4, 3, 4, 3, 4, 3, 1, 4, 4, 2, 2, 2, 2, 4, 1, 3, 2, 1, 3, 1, 2, 4, 1, 1, 4, 3, 4, 4, 1, 4, 3, 4, 1, 3, 1, 4, 3, 4, 4, 4, 2, 3, 2, 4, 4, 2, 3, 4, 1, 1, 1, 4, 3, 2, 4, 4, 2, 1, 2, 2, 4, 2, 1, 2, 4, 1, 4, 2, 1, 2, 2, 2, 3, 1, 3, 2, 2, 3, 1, 2, 4, 4, 1, 1, 4, 1, 4, 3, 1, 2, 4, 3, 2, 3, 2, 3, 4, 4, 3, 2, 1, 3, 3, 2, 2, 1, 1, 2, 4, 2, 4, 4, 3, 3, 4, 4, 2, 4, 2, 1, 4, 3, 3, 1, 3, 1, 3, 1, 2, 2, 1, 3, 4, 1, 1, 3, 3, 4, 4, 3, 2, 3, 2, 2, 4, 4, 3, 1, 3, 4, 4, 4, 3, 1, 3, 2, 3, 3, 2, 3, 3, 2, 1, 1, 3, 4, 2, 4, 3, 1, 1, 2, 3, 3, 2, 3, 3, 2, 1, 1, 1, 4, 2, 2, 1, 4, 1, 3, 1, 1, 2, 1, 1, 3, 1, 4, 1, 2, 2, 2, 1, 4, 4, 3, 1, 1, 3, 1, 1, 3, 1, 4, 3, 1, 4, 2, 3, 3, 3, 3, 2, 2, 4, 1, 2, 1, 3, 1, 2, 3, 1, 4, 2, 2, 2, 2, 4, 4, 1, 3, 4, 3, 4, 3, 4, 2, 3, 1, 4, 4, 4, 4, 1, 1, 3, 4, 1, 2, 1, 2, 1, 4, 2, 3, 3, 1, 1, 1, 3, 3, 2, 1, 3, 4, 4, 3, 4, 1, 1, 4, 2, 1, 3, 3, 3, 1, 2, 1, 1, 1, 4, 2, 4, 1, 3, 1, 4, 3, 2, 2, 2, 3, 4, 1, 3, 3, 1, 4, 1, 3, 3, 3, 4, 3, 4, 4, 4, 2, 1, 3, 2, 2, 3, 4, 3, 2, 2, 2, 1, 2, 4, 1, 4, 2, 1, 2, 4, 2, 1, 2, 2, 1, 3, 4, 1, 4, 3, 3, 4, 4, 3, 2, 3, 2, 2, 1, 1, 2, 2, 3, 2, 3, 4, 2, 1, 3, 4, 1, 4, 1, 1, 3, 3, 4, 1, 4, 1, 4, 1, 1, 2, 2, 3, 2, 3, 2, 3, 4, 4, 3, 2, 1, 3, 3, 2, 2, 1, 1, 2, 4, 2, 4, 4, 4, 1, 2, 2, 4, 3, 1, 3, 4, 2, 2, 4, 2, 2, 1, 2, 2, 4, 3, 3, 2, 1, 4, 1, 3, 1, 3, 2, 3, 3, 2, 3, 3, 2, 1, 1, 3, 4, 2, 2, 1, 4, 1, 3, 1, 1, 3, 1, 1, 3, 4, 4, 4, 2, 3, 3, 4, 2, 4, 1, 4, 4, 1, 4, 1, 2, 1, 4, 3, 1, 4, 2, 2, 2, 2, 2, 4, 1, 3, 2, 1, 2, 1, 2, 3, 4, 2, 2, 3, 3, 3, 2, 2, 4, 1, 3, 4, 3, 4, 3, 1, 4, 2, 3, 3, 3, 3, 3, 2, 2, 4, 3, 2, 1, 2, 3, 4, 2, 3, 1, 1, 1, 1, 1, 3, 2, 4, 3, 3, 3, 1, 2, 4, 4, 4, 2, 1, 2, 4, 4, 2, 1, 2, 4, 4, 4, 2, 1, 3, 3, 3, 1, 2, 1, 3, 3, 1, 4, 1, 3, 2, 3, 1, 2, 4, 1, 4, 2, 3, 2, 4, 4, 2, 3, 2, 4, 1, 4, 2, 1, 3, 2, 3, 1, 4, 1, 3, 3, 1, 4, 1, 4, 4, 2, 2, 3, 4, 2, 1, 1, 2, 4, 3, 2, 2, 4, 4, 3, 3, 4, 1, 4, 1, 1, 2, 2, 1, 1, 4, 1, 4, 3, 3, 4, 4, 3, 2, 3, 2, 2, 1, 1, 2, 2, 3, 2, 3, 4, 4, 3, 3, 4, 1, 4, 1, 1, 2, 2, 1, 1, 4, 1, 4, 3, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 4, 2, 4, 3, 1, 3, 4, 2, 2, 4, 2, 2, 4, 2, 2, 4, 3, 1, 3, 4, 4, 4, 3, 1, 1, 2, 1, 1, 2, 1, 1, 3, 4, 4, 4, 3, 3, 3, 4, 2, 2, 1, 2, 2, 1, 2, 2, 4, 3, 3, 2, 1, 4, 4, 3, 3, 3, 2, 2, 4, 3, 2, 1, 2, 1, 4, 3, 1, 4, 4, 4, 4, 4, 4, 1, 3, 2, 1, 3, 4, 2, 1, 4, 2, 3, 3, 1, 1, 1, 3, 2, 4, 1, 3, 4, 3, 4, 2, 1, 4, 4, 2, 2, 2, 2, 2, 4, 1, 3, 4, 3, 4, 3, 4, 2, 3, 1, 1, 4, 3, 2, 3, 1, 2, 4, 1, 1, 4, 3, 4, 1, 1, 4, 2, 4, 1, 3, 1, 4, 3, 4, 4, 4, 2, 1, 2, 4, 4, 2, 3, 4, 1, 1, 1, 2, 3, 2, 2, 2, 3, 1, 3, 2, 2, 2, 1, 2, 4, 4, 4, 2, 1, 3, 2, 2, 3, 4, 3, 3, 3, 3, 4, 3, 2, 2, 3, 3, 1, 3, 1, 2, 3, 4, 1, 2, 4, 2, 4, 4, 3, 3, 4, 4, 2, 4, 2, 1, 1, 2, 2, 1, 3, 1, 3, 3, 4, 4, 3, 2, 1, 3, 3, 2, 2, 1, 1, 4, 4, 2, 1, 4, 3, 3, 4, 1, 4, 1, 4, 1, 1, 2, 2, 3, 2, 3, 2, 3, 2, 4, 3, 3, 3, 4, 4, 4, 3, 1, 1, 3, 1, 1, 3, 1, 1, 1, 4, 2, 4, 3, 1, 3, 2, 3, 3, 4, 2, 2, 4, 3, 3, 2, 1, 1, 1, 2, 3, 2, 1, 4, 4, 1, 4, 4, 1, 4, 2, 4, 3, 3, 2, 1, 4, 4, 3, 1, 1, 2, 1, 1, 2, 1, 3, 4, 2, 1, 4, 2, 2, 3, 3, 3, 2, 2, 4, 1, 2, 4, 3, 4, 2, 1, 4, 2, 2, 3, 3, 3, 2, 2, 4, 1, 3, 4, 3, 4, 3, 1, 4, 2, 3, 3, 3, 3, 3, 2, 4, 1, 3, 4, 3, 4, 3, 1, 4, 2, 3, 3, 3, 3, 3, 2, 4, 1, 3, 4, 1, 4, 3, 2, 2, 2, 3, 4, 3, 3, 3, 1, 4, 1, 3, 3, 3, 1, 3, 4, 4, 4, 2, 1, 3, 2, 2, 3, 4, 3, 2, 2, 3, 1, 2, 4, 1, 4, 2, 1, 2, 2, 2, 3, 1, 3, 2, 2, 2, 3, 2, 1, 1, 1, 4, 3, 2, 4, 4, 2, 1, 2, 4, 4, 2, 4, 2, 4, 4, 3, 3, 1, 3, 1, 3, 3, 2, 2, 3, 3, 1, 3, 1, 2, 2, 1, 1, 2, 4, 2, 4, 4, 3, 3, 4, 1, 2, 4, 4, 1, 1, 2, 2, 3, 2, 3, 2, 3, 4, 4, 2, 2, 3, 2, 3, 4, 2, 3, 3, 4, 1, 4, 1, 1, 2, 2, 1, 3, 4, 3, 1, 1, 2, 3, 3, 4, 3, 3, 2, 3, 1, 3, 1, 4, 1, 2, 3, 3, 4, 2, 2, 4, 2, 2, 4, 3, 3, 2, 1, 1, 1, 2, 3, 2, 4, 2, 4, 1, 4, 2, 1, 2, 2, 4, 3, 1, 3, 4, 2, 2, 1, 4, 4, 3, 4, 4, 1, 4, 2, 4, 3, 3, 1, 4, 4, 2, 2, 4, 4, 1, 3, 2, 1, 3, 4, 2, 1, 4, 2, 3, 3, 1, 1, 3, 3, 2, 4, 1, 2, 4, 3, 1, 2, 3, 1, 4, 4, 2, 2, 4, 4, 1, 3, 2, 1, 2, 1, 2, 1, 4, 2, 3, 3, 3, 3, 3, 3, 2, 4, 1, 2, 1, 2, 1, 2, 3, 2, 3, 4, 3, 2, 2, 2, 3, 4, 1, 1, 1, 4, 3, 4, 4, 4, 4, 3, 4, 1, 1, 1, 2, 1, 2, 2, 2, 3, 4, 1, 3, 3, 1, 4, 3, 2, 2, 3, 1, 2, 4, 1, 1, 4, 3, 2, 4, 4, 2, 3, 2, 4, 1, 4, 2, 1, 3, 2, 3, 1, 4, 1, 3, 4, 2, 1, 1, 2, 2, 3, 2, 3, 2, 3, 4, 4, 2, 2, 3, 2, 3, 4, 4, 3, 3, 4, 1, 4, 3, 1, 2, 2, 1, 3, 1, 3, 1, 3, 3, 4, 1, 2, 4, 2, 4, 4, 3, 3, 4, 4, 2, 4, 4, 1, 1, 2, 2, 3, 2, 3, 2, 2, 4, 4, 2, 2, 3, 3, 1, 3, 2, 3, 3, 4, 3, 3, 2, 3, 1, 3, 4, 4, 4, 3, 1, 3, 2, 3, 3, 4, 3, 3, 2, 3, 1, 3, 4, 4, 4, 3, 1, 1, 2, 3, 3, 2, 3, 3, 2, 1, 1, 3, 4, 2, 4, 3, 1, 1, 2, 3, 3, 2, 3, 3, 2, 1, 1, 3, 4, 2, 4, 4, 4, 4, 4, 4, 1, 3, 2, 4, 3, 4, 3, 4, 2, 3, 1, 4, 4, 4, 4, 1, 1, 3, 2, 1, 3, 4, 3, 1, 2, 3, 1, 1, 4, 4, 1, 1, 3, 3, 4, 1, 2, 1, 2, 1, 4, 2, 3, 1, 1, 1, 1, 1, 3, 2, 4, 1, 2, 1, 2, 1, 4, 2, 3, 3, 4, 3, 3, 3, 1, 2, 1, 3, 3, 1, 4, 3, 2, 2, 2, 1, 2, 1, 1, 1, 4, 2, 4, 1, 1, 4, 2, 1, 3, 3, 3, 4, 3, 4, 4, 4, 2, 3, 2, 4, 4, 2, 3, 4, 1, 1, 1, 2, 1, 2, 2, 2, 3, 1, 3, 2, 2, 3, 1, 2, 4, 4, 4, 4, 3, 4, 2, 4, 4, 3, 2, 1, 3, 1, 3, 3, 4, 4, 3, 2, 1, 3, 3, 2, 2, 1, 3, 4, 1, 4, 1, 1, 2, 2, 1, 3, 4, 1, 1, 3, 3, 4, 4, 2, 4, 2, 4, 4, 3, 3, 4, 4, 2, 4, 4, 1, 1, 2, 2, 3, 2, 3, 2, 2, 1, 1, 2, 4, 1, 2, 3, 3, 4, 3, 3, 4, 3, 3, 2, 3, 1, 3, 4, 2, 4, 3, 1, 1, 2, 3, 3, 2, 1, 1, 3, 1, 4, 1, 2, 3, 2, 1, 4, 4, 3, 1, 1, 3, 1, 4, 3, 4, 2, 4, 3, 3, 3, 4, 2, 2, 1, 4, 4, 1, 4, 4, 1, 2, 2, 2, 1, 1, 1, 4, 4, 4, 4, 1, 1, 2, 4, 1, 2, 1, 2, 3, 1, 4, 2, 2, 3, 3, 2, 2, 4, 1, 3, 4, 3, 4, 3, 1, 2, 3, 3, 1, 1, 1, 1, 3, 2, 4, 1, 3, 4, 3, 1, 2, 3, 1, 4, 4, 4, 4, 4, 4, 1, 3, 4, 1, 2, 1, 2, 3, 4, 3, 1, 4, 1, 3, 3, 3, 4, 3, 2, 4, 2, 3, 4, 3, 3, 3, 1, 4, 1, 3, 3, 3, 1, 3, 4, 4, 4, 3, 1, 3, 2, 2, 3, 4, 3, 2, 2, 3, 1, 2, 4, 4, 4, 2, 1, 3, 2, 2, 3, 4, 3, 2, 2, 3, 1, 2, 4, 4, 4, 2, 1, 2, 2, 4, 4, 3, 3, 4, 1, 2, 1, 4, 1, 1, 2, 4, 3, 2, 3, 2, 2, 1, 1, 2, 4, 2, 4, 2, 1, 4, 2, 2, 1, 3, 1, 2, 3, 4, 4, 3, 2, 3, 2, 3, 4, 4, 3, 3, 1, 1, 1, 3, 1, 2, 2, 3, 3, 1, 3, 1, 2, 2, 1, 1, 4, 1, 4, 4, 3, 1, 3, 4, 4, 4, 3, 1, 1, 2, 1, 1, 2, 1, 1, 3, 4, 4, 1, 2, 3, 3, 4, 2, 2, 1, 4, 4, 1, 4, 2, 4, 2, 3, 2, 1, 4, 1, 2, 3, 3, 2, 3, 3, 2, 3, 3, 2, 1, 1, 1, 2, 2, 2, 1, 4, 4, 3, 1, 1, 3, 4, 4, 2, 1, 4, 3, 1, 4, 4, 4, 2, 4, 4, 1, 3, 2, 4, 3, 4, 3, 4, 2, 3, 1, 1, 4, 4, 4, 1, 3, 3, 4, 1, 2, 1, 2, 1, 4, 2, 3, 3, 1, 1, 1, 3, 3, 2, 4, 3, 4, 3, 4, 3, 1, 4, 2, 3, 3, 3, 3, 2, 2, 4, 1, 2, 4, 4, 2, 1, 3, 3, 1, 4, 3, 2, 4, 2, 3, 4, 3, 2, 2, 3, 4, 3, 2, 2, 2, 1, 2, 1, 1, 1, 4, 3, 2, 4, 4, 2, 3, 4, 1, 1, 4, 2, 1, 3, 2, 3, 1, 4, 1, 3, 3, 1, 2, 1, 3, 3, 3, 4, 3, 4, 4, 4, 2, 1, 3, 2, 2, 3, 2, 2, 1, 3, 4, 1, 4, 3, 1, 2, 2, 1, 3, 1, 3, 1, 2, 2, 1, 1, 4, 1, 4, 1, 1, 3, 2, 1, 1, 4, 1, 1, 3, 3, 4, 1, 2, 4, 2, 4, 4, 3, 3, 4, 1, 4, 1, 4, 3, 3, 4, 4, 2, 2, 2, 4, 2, 1, 1, 4, 4, 2, 4, 1, 3, 2, 3, 3, 2, 1, 1, 3, 4, 4, 1, 2, 3, 3, 4, 2, 2, 1, 2, 2, 1, 2, 2, 4, 3, 3, 3, 4, 2, 4, 3, 1, 1, 3, 1, 1, 3, 1, 4, 1, 4, 2, 4, 3, 1, 3, 2, 3, 3, 4, 2, 2, 4, 3, 3, 2, 1, 1, 3, 2, 2, 2, 1, 2, 2, 4, 1, 3, 2, 1, 3, 1, 2, 1, 4, 2, 2, 3, 3, 3, 3, 2, 4, 1, 3, 4, 3, 4, 3, 4, 2, 3, 3, 1, 1, 1, 1, 3, 2, 4, 1, 2, 1, 2, 1, 4, 3, 1, 1, 4, 4, 4, 1, 1, 3, 2, 4, 3, 4, 3, 4, 2, 1, 1, 4, 2, 2, 1, 1, 1, 2, 1, 3, 3, 3, 1, 2, 4, 1, 4, 4, 3, 2, 4, 4, 4, 3, 4, 1, 1, 1, 4, 3, 2, 2, 2, 3, 1, 3, 2, 2, 3, 1, 2, 4, 4, 4, 3, 4, 3, 3, 3, 1, 2, 1, 3, 3, 1, 4, 1, 3, 2, 3, 1, 2, 4, 1, 1, 4, 3, 4, 4, 1, 4, 3, 1, 2, 2, 1, 3, 1, 3, 1, 2, 2, 1, 1, 4, 1, 4, 1, 1, 2, 2, 1, 3, 1, 3, 1, 2, 2, 1, 1, 4, 4, 4, 1, 1, 3, 3, 1, 1, 4, 1, 1, 3, 3, 4, 1, 2, 4, 2, 1, 4, 3, 3, 1, 1, 4, 1, 4, 3, 3, 4, 4, 3, 4, 4, 1, 2, 3, 2, 1, 4, 4, 3, 1, 1, 2, 1, 1, 3, 1, 1, 1, 4, 2, 4, 3, 1, 1, 2, 3, 3, 2, 3, 3, 2, 3, 1, 3, 1, 4, 1, 2, 3, 3, 4, 2, 2, 4, 2, 2, 4, 2, 3, 2, 1, 1, 3, 2, 2, 2, 1, 4, 4, 1, 4, 4, 1, 3, 4, 3, 1, 4, 2, 3, 1, 1, 1, 1, 3, 3, 2, 4, 3, 4, 3, 4, 3, 1, 4, 2, 2, 3, 3, 3, 2, 4, 1, 3, 2, 1, 2, 1, 4, 3, 1, 4, 4, 4, 4, 4, 4, 1, 3, 2, 1, 3, 4, 3, 1, 4, 2, 3, 1, 1, 1, 1, 3, 3, 2, 4, 3, 3, 1, 4, 1, 3, 3, 3, 4, 3, 2, 4, 2, 3, 4, 3, 3, 3, 1, 4, 1, 3, 3, 3, 4, 3, 2, 4, 2, 3, 4, 3, 3, 3, 1, 4, 1, 3, 3, 3, 4, 3, 2, 4, 2, 3, 4, 3, 3, 3, 1, 4, 1, 3, 3, 3, 4, 3, 4, 4, 4, 3, 1, 3, 4, 1, 1, 3, 2, 1, 3, 4, 3, 1, 2, 3, 1, 1, 4, 4, 4, 1, 1, 3, 2, 1, 3, 4, 3, 1, 2, 3, 1, 1, 4, 4, 4, 1, 1, 3, 2, 1, 3, 4, 3, 1, 2, 3, 1, 1, 2, 4, 2, 1, 4, 3, 3, 1, 1, 4, 1, 1, 3, 3, 4, 1, 2, 4, 2, 4, 2, 3, 2, 4, 4, 4, 3, 4, 1, 3, 1, 4, 3, 4, 4, 1, 2, 3, 2, 1, 4, 4, 3, 1, 1, 3, 1, 1, 3, 4, 4, 1, 2, 3, 2, 1, 4, 4, 3, 1, 1, 3, 1, 1, 3, 4, 4, 1, 2, 3, 2, 1, 4, 4, 3, 1, 1, 3, 1, 1, 3, 4, 3, 4, 2, 1, 1, 4, 2, 2, 2, 4, 4, 1, 3, 4, 1, 2, 1, 4, 3, 1, 4, 2, 2, 2, 2, 2, 4, 1, 3, 2, 1, 2, 1, 2, 3, 1, 4, 2, 2, 3, 2, 2, 4, 4, 1, 2, 4, 3, 4, 2, 1, 4, 2, 2, 3, 3, 3, 2, 2, 4, 1, 3, 4, 3, 3, 4, 1, 3, 1, 4, 3, 4, 1, 1, 4, 3, 4, 1, 1, 1, 2, 1, 3, 2, 2, 3, 4, 1, 3, 3, 1, 2, 1, 3, 3, 3, 1, 3, 4, 4, 4, 2, 1, 3, 2, 2, 3, 1, 3, 2, 4, 2, 3, 4, 1, 1, 1, 4, 3, 4, 4, 4, 4, 3, 4, 1, 1, 4, 15, 16, 1, 1, 2, 2, 1, 3, 1, 3, 1, 2, 2, 1, 1, 4, 1, 4, 1, 1, 2, 2, 1, 3, 1, 3, 1, 2, 2, 1, 1, 4, 1, 4, 3, 1, 2, 2, 3, 3, 1, 3, 3, 2, 2, 1, 3, 4, 1, 4, 3, 1, 2, 2, 3, 3, 1, 3, 3, 2, 2, 1, 13, 14, 19, 20, 3, 4, 4, 4, 3, 1, 3, 2, 3, 3, 2, 3, 3, 2, 1, 1, 3, 4, 2, 4, 3, 1, 1, 2, 1, 3, 2, 1, 1, 3, 1, 4, 1, 2, 2, 2, 1, 4, 4, 3, 1, 1, 3, 1, 1, 3, 4, 4, 1, 2, 3, 2, 4, 2, 4, 1, 4, 4, 3, 4, 17, 18 } });
                        #endregion
                    }
                    break;
            }

            auxList.Add(0);
            foreach (string reference in chunkTilesets)
            {
                if (!Game1.mission.tilesets.ContainsKey(reference))
                {
                    Game1.mission.tilesets.Add(reference, new Tileset(reference, (int)Config.tileSize));
                }

                aux = aux + Game1.mission.tilesets[reference].tilesCount;
                auxList.Add(aux);
            }
        }

        internal void drawChunkFloor()
        {
            foreach (Layer layer in layers)
            {
                aux = 0;
                //if (layer.type != "status" && Convert.ToInt32(layer.type) < 0)
                for (int y = 0; y < Config.tilesPerChunk; y++)
                {
                    for (int x = 0; x < Config.tilesPerChunk; x++)
                    {
                        if ((region.X * Config.chunkSize) - (Config.chunkSize / 2f) + (x * Config.tileSize)  < Game1.mission.player.position.X + Game1.display.displayWidthOver2 - 100 + Config.tileSize &&
                           ((region.X * Config.chunkSize) - (Config.chunkSize / 2f) + (x * Config.tileSize) > Game1.mission.player.position.X - Game1.display.displayWidthOver2 + 100 - Config.tileSize &&
                            (region.Y * Config.chunkSize) + (Config.chunkSize / 2f) + (-y * Config.tileSize) < Game1.mission.player.position.Y + Game1.display.displayHeightOver2 - 100 + Config.tileSize &&
                            (region.Y * Config.chunkSize) + (Config.chunkSize / 2f) + (-y * Config.tileSize) > Game1.mission.player.position.Y - Game1.display.displayHeightOver2 + 100 - Config.tileSize))
                            for (int a = 1; a < auxList.Count; a++)
                            {
                                if (layer.data[aux] > auxList[a - 1] && layer.data[aux] <= auxList[a] && auxList[a] > 0)
                                {
                                    tileset = Game1.mission.tilesets[chunkTilesets.ElementAt(a - 1)];
                                    numX = (layer.data[aux] - auxList[a - 1]) % tileset.tilesPerRow;
                                    numY = (layer.data[aux] - auxList[a - 1]) / tileset.tilesPerRow;

                                    if (numX == 0)
                                    {
                                        numY--;
                                        numX = tileset.tilesPerRow - 1;
                                    }
                                    else
                                    {
                                        numX--;
                                    }

                                    tileset.drawTile((int)((region.X * Config.chunkSize) - (Config.chunkSize / 2f) + (x * Config.tileSize)),
                                                     (int)((region.Y * Config.chunkSize) + (Config.chunkSize / 2f) + (-y * Config.tileSize)), numX, numY);
                                    break;
                                }
                            }
                        aux++;
                    }
                }
            }
        }

        internal void drawChunkRoof()
        {

        }

        internal void drawOnMiniMap()
        {
            foreach (Layer layer in layers)
            {
                aux = 0;
                for (int y = 0; y < Config.tilesPerChunk; y++)
                {
                    for (int x = 0; x < Config.tilesPerChunk; x++)
                    {
                        for (int a = 1; a < auxList.Count; a++)
                        {
                            if (layer.data[aux] > auxList[a - 1] && layer.data[aux] <= auxList[a] && auxList[a] > 0)
                            {
                                tileset = Game1.mission.tilesets[chunkTilesets.ElementAt(a - 1)];
                                numX = (layer.data[aux] - auxList[a - 1]) % tileset.tilesPerRow;
                                numY = (layer.data[aux] - auxList[a - 1]) / tileset.tilesPerRow;

                                if (numX == 0)
                                {
                                    numY--;
                                    numX = tileset.tilesPerRow - 1;
                                }
                                else
                                {
                                    numX--;
                                }

                                tileset.drawTileOnMiniMap((int)((region.X - Game1.mission.mapManager.playerRegion.X + 1) * Config.tilesPerChunk) + x + 4, (int)((region.Y - Game1.mission.mapManager.playerRegion.Y - 1) * Config.tilesPerChunk) + -y - 4, numX, numY);
                                break;
                            }
                        }
                        aux++;
                    }
                }
            }
        }
    }
}
